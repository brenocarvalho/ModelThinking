'''
Universidade Federal Fluminense
Loyola University Chicago

Writen by Breno Carvalho
December, 2013
'''

import json
from random import choice, random
from math import floor

class File():

    def __init__(self, num_pieces, piece_size, popularity, identifier):
        self.num_numpieces = num_pieces
        self.piece_size = piece_size
        self.file_size = piece_size*num_pieces

        self.identifier = identifier
        self.popularity

    def isComplete(self, pieces):
        return len(pieces) == self.piece_size

    def __len__(self):
        return self.file_size

    def __hash__(self):
        return hash(self.identifier)

class Computer:

    def __init__(self, down_rate, up_rate, files_life_time, max_trackers): # files_life_time means the amount of time  a file is kept once the download is completed
        self.down_rate = down_rate
        self.up_rate = up_rate
        self.f_life_time = files_life_time
        self.max_trackers = max_trackers
        self.files = []
        self.setTrackers([]) # [ (comp, file, percent), ...], where percent is used by the download method to measure how moch was already downloaded
        self.folder = {} # self.folder is a dictionary with all the torrents the machine have and it's pieces
        self.complete_folder = [] #list of all complete torrents
        self.cache = 0
        self.up_available #its how much a new connection can ask from this one

    def setTrackers(self, trackers):
        self.trackers = trackers[:]

    def requestFragments(self, computer, file_f):
        p_list = computer.get_pieces_list(file_f)
        if len(p_list) == 0:
            p_list = self._complete_folder.get(file_f, [])

    def addpieces(self, file_f, pieces):
        assert type(b) is set, "[addpieces] it's not e set!"
        self.folder[file_f] = self.get_pieces_list(file_f).union(paces)

    def getPiecesList(self, file_f):
        return self.folder.get(file_f, [])

    def getCompleteFiles(self):
        return self.complete_folder[:]

    def downloadClock(self, time = 1, resolution = 1):
        cache += self.down_rate*time
        while cache >= resolution:
            tracker, torrent, downloaded = self.trackers.pop(0)
            files = self.requestFragments(tracker, torrent)
            if len(files) == 0:
                cache += downloaded
                continue
            down_available = min(tracker.up_available, self.cache)
            packet = files[0:round((downloaded+down_available)/ torrent.piece_size)]
            cache -= down_available
            downloaded = down_available + downloaded - torrent.piece_size*len(packet)
            self.trackers.append((tracker, torrent, downloaded))

    def uploadClock(self, time = 1):
        self.up_available += self.up_rate
    
    def hasTorrent(self, torrent):
        return torrent in self.folder or torrent in self.complete_folder

    def hasCompleteTorrent(self, torrent):
        return torrent in self.complete_folder


class Network():
    
    def __init__(self, computers): #assume all computers are interconnected
        self.computers = computers[:]

    def findSeeds(self, torrent):
        map(lambda x: x.hasCompleteTorrent(torrent), self.computers)

    def insertTorrent(self, file_f): #it iserts a file in one of the computers chose from random
        for comp in self.computers:
            if random() < filef.popularity:
                comp.addpieces(self, file_f, [])
        comp = choice(self.computer)
        comp.addpieces( self, file_f, range(len(file_f.piece_size)) )
        

    def toFile(self, f):
        pass #json.dump(obj, f)
        #TODO


if __name__ == "__main__":
    ''' create two computers
        add them to the network
        add a file to one of of them
        watch while the file is transfered (prints)
    '''
